<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
         http://www.springframework.org/schema/task    
        http://www.springframework.org/schema/task/spring-task-4.0.xsd">
	<context:annotation-config />
	<context:component-scan base-package="cn.yh.st">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>


	<context:property-placeholder location="classpath:conf.properties"
		ignore-unresolvable="true" />

	<bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
		destroy-method="close" abstract="true">
		<property name="xaDataSourceClassName" value="${jdbc.xaDataSourceClassName}" />  <!-- SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, 
			Hana] -->
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="borrowConnectionTimeout" value="60" />
		<property name="reapTimeout" value="20" />
		<property name="maxIdleTime" value="60" />
		<property name="maintenanceInterval" value="60" />
		<property name="loginTimeout" value="60" />
		<property name="testQuery" value="${validationQuery}" />
	</bean>
	<bean id="dataSourceOne" parent="abstractXADataSource">
		<property name="uniqueResourceName" value="masterDB" />
		<property name="xaProperties">
			<props>
				<prop key="driverClassName">${jdbc.driver}</prop>
				<prop key="url">${jdbc.one.url}</prop>
				<prop key="password">${jdbc.one.password}</prop>
				<!-- <prop key="user">${jdbc.username}</prop> --> <!-- mysql -->
				<prop key="username">${jdbc.one.username}</prop>   <!-- durid -->
				<prop key="initialSize">0</prop>
				<prop key="maxActive">20</prop> <!-- 若不配置则代码执行"{dataSource-1} inited"此处停止 -->
				<prop key="minIdle">0</prop>
				<prop key="maxWait">60000</prop>
				<prop key="validationQuery">${validationQuery}</prop>
				<prop key="testOnBorrow">false</prop>
				<prop key="testOnReturn">false</prop>
				<prop key="testWhileIdle">true</prop>
				<prop key="removeAbandoned">true</prop>
				<prop key="removeAbandonedTimeout">1800</prop>
				<prop key="logAbandoned">true</prop>
				<prop key="filters">mergeStat</prop>
			</props>
		</property>
	</bean>
	<bean id="dataSourceTwo" parent="abstractXADataSource">
		<property name="uniqueResourceName" value="slaveDB" />
		<property name="xaProperties">
			<props>
				<prop key="driverClassName">${jdbc.driver}</prop>
				<prop key="url">${jdbc.two.url}</prop>
				<prop key="password">${jdbc.two.password}</prop>
				<!-- <prop key="user">${jdbc.username}</prop> -->
				<prop key="username">${jdbc.two.username}</prop>
				<prop key="initialSize">0</prop>
				<prop key="maxActive">20</prop>
				<prop key="minIdle">0</prop>
				<prop key="maxWait">60000</prop>
				<prop key="validationQuery">${validationQuery}</prop>
				<prop key="testOnBorrow">false</prop>
				<prop key="testOnReturn">false</prop>
				<prop key="testWhileIdle">true</prop>
				<prop key="removeAbandoned">true</prop>
				<prop key="removeAbandonedTimeout">1800</prop>
				<prop key="logAbandoned">true</prop>
				<prop key="filters">mergeStat</prop>
			</props>
		</property>
	</bean>

	<!--配置分布式事务 -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="false" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300000" />
	</bean>

	<!--JTA事务管理器 -->
	<bean id="springTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager">
			<ref bean="atomikosTransactionManager" />
		</property>
		<property name="userTransaction">
			<ref bean="atomikosUserTransaction" />
		</property>
		<property name="allowCustomIsolationLevels" value="true" />
	</bean>

	<aop:aspectj-autoproxy />
	<!--声明式事务 -->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.yh.st.service.impl.*.*(..))" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="valid*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="write*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="process*" propagation="REQUIRED" />
			<tx:method name="cancel*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="roll*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!--mybatis的相关配置 -->
	<bean id="sqlSessionFactoryOne" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceOne" />
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
		<property name="typeAliasesPackage" value="cn.yh.st.domain" />
		<property name="mapperLocations">
			<list>
				<value>classpath:/mybatis/one/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<bean id="sqlSessionFactoryTwo" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceTwo" />
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
		<property name="typeAliasesPackage" value="cn.yh.st.domain" />
		<property name="mapperLocations">
			<list>
				<value>classpath:/mybatis/two/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<!--配置mybatis映射文件自动扫描 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.yh.st.dao.one" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryOne" />
	</bean>

	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.yh.st.dao.two" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryTwo" />
	</bean>
</beans>